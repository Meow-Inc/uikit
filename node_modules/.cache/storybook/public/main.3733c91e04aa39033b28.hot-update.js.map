{"version":3,"file":"main.3733c91e04aa39033b28.hot-update.js","sources":["webpack:///./src/widgets/Menu/components/Dropdown.tsx"],"sourcesContent":["import React, { ReactNode, useState, useRef, } from \"react\";\nimport styled from \"styled-components\";\nimport { MENU_ENTRY_HEIGHT } from \"../config\";\nimport { LinkLabel, LinkStatus as LinkStatusComponent, MenuEntry } from \"./MenuEntry\";\nimport { LinkStatus, PushedProps } from \"../types\";\nimport { ArrowDropDownIcon, ArrowDropUpIcon } from \"../../../components/Svg\";\nimport useOnClickOutside from '../../../hooks/useClickOutSide'\n\ninterface Props extends PushedProps {\n  label: string;\n  status?: LinkStatus;\n  icon: React.ReactElement;\n  initialOpenState?: boolean;\n  className?: string;\n  children: ReactNode;\n  isActive?: boolean;\n}\n\nconst Container = styled.div<{isMobile: boolean;}>`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  position: relative;\n  width: ${({ isMobile }) => (isMobile ? `100%`:`initial`)};\n\n`;\n\nconst DropdownContent = styled.div<{ isOpen: boolean; isPushed: boolean; maxHeight: number }>`\n  max-height: ${({ isOpen, maxHeight }) => (isOpen ? `${maxHeight + 16}px` : 0)};\n  transition: max-height 0.3s ease-out;\n  overflow: hidden;\n  border-color: ${({ isOpen, isPushed }) => (isOpen && isPushed ? \"rgba(133, 133, 133, 0.1)\" : \"transparent\")};\n  padding: ${({ isOpen, isPushed }) => (isOpen && isPushed ? `8px 0px ` : '0px')};\n  background-color: ${({ theme }) => theme.nav.background};\n  box-shadow: ${({ theme }) => theme.colors.shadows.dropDown};\n  border-radius: 0px 0px 12px 12px;\n  top: 60px;\n  position: absolute;\n  width: 100%;\n`;\n\nconst Dropdown: React.FC<Props> = ({\n  label,\n  status,\n  icon,\n  isPushed,\n  pushNav,\n  initialOpenState = false,\n  children,\n  className,\n  isActive,\n}) => {\n  const [isOpen, setIsOpen] = useState(initialOpenState);\n  const handleClick = () => {\n    if (isPushed) {\n      setIsOpen((prevState) => !prevState);\n    } else {\n      pushNav(true);\n      setIsOpen(true);\n    }\n  };\n\n  // Handle close if click outside\n  const ref = useRef(null)\n  useOnClickOutside(ref,() => setIsOpen(false))\n\n\n  return (\n    <Container ref={ref} isPushed={isPushed}>\n      <MenuEntry onClick={handleClick} className={className} isActive={isActive} role=\"button\">\n        {icon}\n        <LinkLabel isPushed={isPushed}>{label}</LinkLabel>\n        {status && (\n          <LinkStatusComponent color={status.color} fontSize=\"14px\">\n            {status.text}\n          </LinkStatusComponent>\n        )}\n        {isOpen ? <ArrowDropUpIcon /> : <ArrowDropDownIcon />}\n      </MenuEntry>\n      <DropdownContent\n        isOpen={isOpen}\n        isPushed={isPushed}\n        maxHeight={React.Children.count(children) * MENU_ENTRY_HEIGHT}>\n        {children}\n      </DropdownContent>\n    </Container>\n  );\n};\n\nexport default Dropdown;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;;;AAYA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAMA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAJA;AAWA;AACA;AACA;AAHA;AAAA;AAXA;AAmBA;AACA;AA/CA;AAgDA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}