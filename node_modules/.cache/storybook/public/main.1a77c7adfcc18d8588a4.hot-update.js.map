{"version":3,"file":"main.1a77c7adfcc18d8588a4.hot-update.js","sources":["webpack:///./src/hooks/useClickOutSide.ts","webpack:///./src/widgets/Menu/components/Dropdown.tsx","webpack:///./src/widgets/Menu/components/PanelBody.tsx"],"sourcesContent":["import { RefObject, useEffect } from 'react'\n\ntype AnyEvent = MouseEvent | TouchEvent\n\nfunction useOnClickOutside<T extends HTMLElement = HTMLElement>(\n  ref: RefObject<T>,\n  handler: (event: AnyEvent) => void,\n) {\n  useEffect(() => {\n    const listener = (event: AnyEvent) => {\n      const el = ref?.current\n\n      // Do nothing if clicking ref's element or descendent elements\n      if (!el || el.contains(event.target as Node)) {\n        return\n      }\n\n      handler(event)\n    }\n\n    document.addEventListener(`mousedown`, listener)\n    document.addEventListener(`touchstart`, listener)\n\n    return () => {\n      document.removeEventListener(`mousedown`, listener)\n      document.removeEventListener(`touchstart`, listener)\n    }\n\n    // Reload only if ref or handler changes\n  }, [ref, handler])\n}\n\nexport default useOnClickOutside\n","import React, { ReactNode, useState, useRef, } from \"react\";\nimport styled from \"styled-components\";\nimport { MENU_ENTRY_HEIGHT } from \"../config\";\nimport { LinkLabel, LinkStatus as LinkStatusComponent, MenuEntry } from \"./MenuEntry\";\nimport { LinkStatus, PushedProps } from \"../types\";\nimport { ArrowDropDownIcon, ArrowDropUpIcon } from \"../../../components/Svg\";\nimport useOnClickOutside from '../../../hooks/useClickOutSide'\n\ninterface Props extends PushedProps {\n  label: string;\n  status?: LinkStatus;\n  icon: React.ReactElement;\n  initialOpenState?: boolean;\n  className?: string;\n  children: ReactNode;\n  isActive?: boolean;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  position: relative;\n`;\n\nconst DropdownContent = styled.div<{ isOpen: boolean; isPushed: boolean; maxHeight: number }>`\n  max-height: ${({ isOpen, maxHeight }) => (isOpen ? `${maxHeight + 16}px` : 0)};\n  transition: max-height 0.3s ease-out;\n  overflow: hidden;\n  border-color: ${({ isOpen, isPushed }) => (isOpen && isPushed ? \"rgba(133, 133, 133, 0.1)\" : \"transparent\")};\n  padding: ${({ isOpen, isPushed }) => (isOpen && isPushed ? `8px 0px ` : '0px')};\n  background-color: ${({ theme }) => theme.nav.background};\n  border-radius: 0px 0px 12px 12px;\n  top: 60px;\n  position: absolute;\n  width: 100%;\n`;\n\nconst Dropdown: React.FC<Props> = ({\n  label,\n  status,\n  icon,\n  isPushed,\n  pushNav,\n  initialOpenState = false,\n  children,\n  className,\n  isActive,\n}) => {\n  const [isOpen, setIsOpen] = useState(initialOpenState);\n  const handleClick = () => {\n    if (isPushed) {\n      setIsOpen((prevState) => !prevState);\n    } else {\n      pushNav(true);\n      setIsOpen(true);\n    }\n  };\n\n  // Handle close if click outside\n  const ref = useRef(null)\n  useOnClickOutside(ref,() => setIsOpen(false))\n\n\n  return (\n    <Container ref={ref}>\n      <MenuEntry onClick={handleClick} className={className} isActive={isActive} role=\"button\">\n        {icon}\n        <LinkLabel isPushed={isPushed}>{label}</LinkLabel>\n        {status && (\n          <LinkStatusComponent color={status.color} fontSize=\"14px\">\n            {status.text}\n          </LinkStatusComponent>\n        )}\n        {isOpen ? <ArrowDropUpIcon /> : <ArrowDropDownIcon />}\n      </MenuEntry>\n      <DropdownContent\n        isOpen={isOpen}\n        isPushed={isPushed}\n        maxHeight={React.Children.count(children) * MENU_ENTRY_HEIGHT}>\n        {children}\n      </DropdownContent>\n    </Container>\n  );\n};\n\nexport default Dropdown;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useLocation } from \"react-router-dom\";\nimport { SvgProps } from \"../../../components/Svg\";\nimport * as IconModule from \"../icons\";\nimport Dropdown from \"./Dropdown\";\nimport { MenuEntry, LinkLabel, LinkStatus } from \"./MenuEntry\";\nimport MenuLink from \"./MenuLink\";\nimport { PanelProps, PushedProps } from \"../types\";\n\ninterface Props extends PanelProps, PushedProps {\n  isMobile: boolean;\n}\n\nconst Icons = IconModule as unknown as { [key: string]: React.FC<SvgProps> };\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  overflow-x: hidden;\n  height: 100%;\n`;\n\nconst PanelBody: React.FC<Props> = ({ isPushed, pushNav, isMobile, links }) => {\n  const location = useLocation();\n\n  // Close the menu when a user clicks a link on mobile\n  const handleClick = isMobile ? () => pushNav(false) : undefined;\n\n  return (\n    <Container>\n      {links.map((entry) => {\n        const Icon = Icons[entry.icon];\n        const iconElement = <Icon width=\"24px\" mr=\"8px\" />;\n        const calloutClass = entry.calloutClass ? entry.calloutClass : undefined;\n\n        if (entry.items) {\n          const itemsMatchIndex = entry.items.findIndex((item) => item.href === location.pathname);\n          const initialOpenState = entry.initialOpenState === true ? entry.initialOpenState : itemsMatchIndex >= 0;\n\n          return (\n            <Dropdown\n              key={entry.label}\n              isPushed={isPushed}\n              pushNav={pushNav}\n              icon={iconElement}\n              label={entry.label}\n              status={entry.status}\n              initialOpenState={initialOpenState}\n              className={calloutClass}\n              isActive={entry.items.some((item) => item.href === location.pathname)}\n            >\n              {isPushed &&\n                entry.items.map((item) => (\n                  <MenuEntry key={item.href} secondary isActive={item.href === location.pathname} onClick={handleClick}>\n                    <MenuLink href={item.href}>\n                      <LinkLabel isPushed={isPushed}>{item.label}</LinkLabel>\n                      {item.status && (\n                        <LinkStatus color={item.status.color} fontSize=\"14px\">\n                          {item.status.text}\n                        </LinkStatus>\n                      )}\n                    </MenuLink>\n                  </MenuEntry>\n                ))}\n            </Dropdown>\n          );\n        }\n        return (\n          <MenuEntry key={entry.label} isActive={entry.href === location.pathname} className={calloutClass}>\n            <MenuLink href={entry.href} onClick={handleClick}>\n              {iconElement}\n              <LinkLabel isPushed={isPushed}>{entry.label}</LinkLabel>\n              {entry.status && (\n                <LinkStatus color={entry.status.color} fontSize=\"14px\">\n                  {entry.status.text}\n                </LinkStatus>\n              )}\n            </MenuLink>\n          </MenuEntry>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default PanelBody;\n"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AACA;AAGA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AAEA;AACA;;;AAYA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAMA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAJA;AAWA;AACA;AACA;AAHA;AAAA;AAXA;AAmBA;AACA;AA/CA;AAgDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvFA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAOA;AAEA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAYA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAHA;AADA;AADA;AAZA;AA0BA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAJA;AADA;AAYA;AAnDA;AAsDA;AACA;AA9DA;AA+DA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}